def baseline_model():
    model = Sequential()
    model.add(Conv2D(32, (3, 3), input_shape=(1, 16, 8), activation='relu'))
    model.add(MaxPooling2D(pool_size=(2, 2)))
    
    # Second CONV => RELU => POOL Layer
    model.add(Conv2D(50, 3, 3, border_mode="same"))
    model.add(Activation("relu"))
    model.add(MaxPooling2D(pool_size=(2, 2), strides=(2, 2), dim_ordering="th"))
        
    model.add(Dropout(0.2))
    model.add(Flatten())
    model.add(Dense(500, activation='relu'))
    model.add(Dense(26, activation='softmax'))
    model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])
    return model

Epoch 20/20
 - 23s - loss: 0.2302 - acc: 0.9229 - val_loss: 0.2452 - val_acc: 0.9182

def baseline_model():
    model = Sequential()
    model.add(Conv2D(32, (3, 3), input_shape=(1, 16, 8), activation='relu'))
    model.add(MaxPooling2D(pool_size=(2, 2)))
    
    # Second CONV => RELU => POOL Layer
    model.add(Conv2D(50, 5, 5, border_mode="same"))
    model.add(Activation("relu"))
    model.add(MaxPooling2D(pool_size=(2, 2), strides=(2, 2), dim_ordering="th"))
        
    model.add(Dropout(0.2))
    model.add(Flatten())
    model.add(Dense(500, activation='relu'))
    model.add(Dense(26, activation='softmax'))
    model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])
    return model

Epoch 20/20
 - 23s - loss: 0.2033 - acc: 0.9291 - val_loss: 0.2433 - val_acc: 0.9235

def baseline_model():
    model = Sequential()
    model.add(Conv2D(32, (5, 5), input_shape=(1, 16, 8), activation='relu'))
    model.add(MaxPooling2D(pool_size=(2, 2)))
    
    # Second CONV => RELU => POOL Layer
    model.add(Conv2D(50, 5, 5, border_mode="same"))
    model.add(Activation("relu"))
    model.add(MaxPooling2D(pool_size=(2, 2), strides=(2, 2), dim_ordering="th"))
        
    model.add(Dropout(0.2))
    model.add(Flatten())
    model.add(Dense(500, activation='relu'))
    model.add(Dense(26, activation='softmax'))
    model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])
    return model

Epoch 20/20
 - 14s - loss: 0.2236 - acc: 0.9238 - val_loss: 0.2573 - val_acc: 0.9185

def baseline_model():
    model = Sequential()
    model.add(Conv2D(30, (5, 5), input_shape=(1, 16, 8), activation='relu', data_format='channels_first'))
    model.add(MaxPooling2D(pool_size=(2, 2), dim_ordering="th"))
    model.add(Conv2D(15, (3, 3), activation='relu', padding="same"))
    model.add(MaxPooling2D(pool_size=(2, 2), dim_ordering="th"))
    model.add(Dropout(0.2))
    model.add(Flatten())
    model.add(Dense(128, activation='relu'))
    model.add(Dense(50, activation='relu'))
    model.add(Dense(26, activation='softmax'))
	# Compile model
    model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])
    return model

Epoch 20/20
 - 10s - loss: 0.4456 - acc: 0.8598 - val_loss: 0.3512 - val_acc: 0.8898

def baseline_model():
    model = Sequential()
    model.add(Conv2D(32, (3, 3), input_shape=(1, 16, 8), activation='relu', padding='same'))
    model.add(Conv2D(32, (3, 3), activation='relu', padding='same'))
    model.add(MaxPooling2D(pool_size=(2, 2)))
    model.add(Dropout(0.2))
    
    model.add(Conv2D(64, (3, 3), activation='relu', padding='same'))
    model.add(Conv2D(64, (3, 3), activation='relu', padding='same'))
    model.add(MaxPooling2D(pool_size=(2, 2)))
    model.add(Dropout(0.2))
    
    model.add(Flatten())
    model.add(Dense(512, activation='relu'))
    model.add(Dense(26, activation='softmax'))
    model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])
    return model

Epoch 20/20
 - 71s - loss: 0.1203 - acc: 0.9549 - val_loss: 0.2107 - val_acc: 0.9375

0.5 droupout
Epoch 30/30
 - 71s - loss: 0.1237 - acc: 0.9545 - val_loss: 0.1927 - val_acc: 0.9423